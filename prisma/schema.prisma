// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model admin {
    id                 Int              @id @default(autoincrement())
    username           String           @unique
    password           String
    title              String
    address            String
    lng                Decimal?
    lat                Decimal?
    office_hours_start DateTime
    office_hours_end   DateTime
    products           products[]
    admin_type         admin_type       @default(BRANCH)
    cashiers           cashier[]
    delivery_rider     delivery_rider[]
    settings           settings?

    transaction transaction[]
}

model cashier {
    id           Int           @id @default(autoincrement())
    admin_id     Int
    username     String        @unique
    password     String
    first_name   String
    middle_name  String
    last_name    String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    transactions transaction[]
    admin        admin         @relation(fields: [admin_id], references: [id])
}

model products {
    id            Int                     @id @default(autoincrement())
    product_name  String
    image_url     String
    admin_id      Int
    category_id   Int
    amount        Float
    status        product_status          @default(AVAILABLE)
    admin         admin                   @relation(fields: [admin_id], references: [id])
    category      product_category        @relation(fields: [category_id], references: [id])
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @updatedAt
    orders        orders[]
    price_history product_price_history[]
}

model product_category {
    id            Int        @id @default(autoincrement())
    category_name String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    products      products[]
}

model orders {
    id             Int          @id @default(autoincrement())
    product_id     Int
    quantity       Int
    transaction_id Int
    product        products     @relation(fields: [product_id], references: [id])
    transaction    transaction? @relation(fields: [transaction_id], references: [id])
}

model transaction {
    id                Int                @id @default(autoincrement())
    total_amount      Float
    admin_id          Int
    cashier_id        Int?
    delivery_rider_id Int?
    customer_id       Int
    transaction_type  transaction_type
    status            transaction_status @default(PENDING)
    delivery_fee      Float
    orders            orders[]
    customer          customer?           @relation(fields: [customer_id], references: [id])
    admin             admin              @relation(fields: [admin_id], references: [id])
    cashier           cashier?           @relation(fields: [cashier_id], references: [id])
    rider             delivery_rider?    @relation(fields: [delivery_rider_id], references: [id])
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
}

model delivery_rider {
    id             Int           @id @default(autoincrement())
    admin_id       Int
    username       String        @unique
    password       String
    first_name     String
    middle_name    String
    last_name      String
    contact_number String
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
    transactions   transaction[]
    admin          admin         @relation(fields: [admin_id], references: [id])
}

model customer {
    id                Int             @id @default(autoincrement())
    username          String          @unique
    password          String
    first_name        String
    middle_name       String
    last_name         String
    address           String?
    place_description String?
    contact_number    String          @unique
    status            customer_status @default(REGISTERED)
    transactions      transaction[]
    createdAt         DateTime        @default(now())
    updatedAt         DateTime        @updatedAt
}

model settings {
    admin_id            Int      @id
    delivery_fee        Float
    contact_number      String
    email_address       String
    store_name          String   @default("Sample")
    address             String
    extra_details       String?
    defaultPassForStaff String   @default("Default123")
    updatedAt           DateTime @updatedAt
    admin               admin    @relation(fields: [admin_id], references: [id])
}

model product_price_history {
    id         Int      @id @default(autoincrement())
    product_id Int
    price      Float
    createdAt  DateTime @default(now())
    product    products @relation(fields: [product_id], references: [id])
}

enum admin_type {
    SUPER_ADMIN
    BRANCH
}

enum product_status {
    AVAILABLE
    NOT_AVAILABLE
}

enum customer_status {
    REGISTERED
    BLOCKED
}

enum transaction_type {
    DINE_IN
    PICK_UP
    DELIVERY
}

enum transaction_status {
    PENDING
    ONGOING
    DONE
    CANCELLED
}

// enum product_category {
//     CHICKEN
//     CHICHARON
//     RICE
//     DRINKS
// }
