generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admin {
  id                 Int              @id @default(autoincrement())
  username           String           @unique
  password           String
  title              String
  address            String
  lng                Decimal?
  lat                Decimal?
  office_hours_start DateTime
  office_hours_end   DateTime
  admin_type         admin_type       @default(BRANCH)
  cashiers           cashier[]
  delivery_rider     delivery_rider[]
  products           products[]
  settings           settings?
  transaction        transaction[]
}

model cashier {
  id            Int           @id @default(autoincrement())
  admin_id      Int
  username      String        @unique
  password      String
  first_name    String
  middle_name   String
  last_name     String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile_image String?
  admin         admin         @relation(fields: [admin_id], references: [id])
  transactions  transaction[]
}

model products {
  id            Int                     @id @default(autoincrement())
  product_name  String
  admin_id      Int
  status        product_status          @default(AVAILABLE)
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  image_url     String
  category_id   Int
  orders        orders[]
  price_history product_price_history[]
  admin         admin                   @relation(fields: [admin_id], references: [id])
  category      product_category        @relation(fields: [category_id], references: [id])
}

model product_category {
  id            Int        @id @default(autoincrement())
  category_name String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      products[]
}

model orders {
  id               Int                   @id @default(autoincrement())
  product_id       Int
  product_price_id Int 
  quantity         Int
  transaction_id   Int
  product          products              @relation(fields: [product_id], references: [id])
  product_price product_price_history @relation(fields: [product_price_id], references: [id])
  transaction      transaction           @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}

model transaction {
  id                  Int                           @id @default(autoincrement())
  total_amount        Float
  cashier_id          Int?
  delivery_rider_id   Int?
  transaction_type    transaction_type
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  customer_id         Int?
  status              transaction_status            @default(PENDING)
  admin_id            Int
  grouped_delivery_id Int?
  orders              orders[]
  admin               admin                         @relation(fields: [admin_id], references: [id])
  cashier             cashier?                      @relation(fields: [cashier_id], references: [id])
  customer            customer?                     @relation(fields: [customer_id], references: [id])
  rider               delivery_rider?               @relation(fields: [delivery_rider_id], references: [id])
  grouped_delivery    grouped_delivery_by_customer? @relation(fields: [grouped_delivery_id], references: [id])
}

model grouped_delivery_by_customer {
  id           Int                @id @default(autoincrement())
  rider_id     Int
  delivery_fee Float
  status       transaction_status @default(ONGOING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  rider        delivery_rider     @relation(fields: [rider_id], references: [id])
  transactions transaction[]
}

model delivery_rider {
  id               Int                            @id @default(autoincrement())
  admin_id         Int
  username         String                         @unique
  first_name       String
  middle_name      String
  last_name        String
  contact_number   String
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  password         String
  profile_image    String?
  admin            admin                          @relation(fields: [admin_id], references: [id])
  grouped_delivery grouped_delivery_by_customer[]
  transactions     transaction[]
}

model customer {
  id                Int             @id @default(autoincrement())
  username          String          @unique
  password          String
  first_name        String
  middle_name       String
  last_name         String
  contact_number    String          @unique
  status            customer_status @default(REGISTERED)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  address           String?
  place_description String?
  barangayId        Int
  barangay          barangays       @relation(fields: [barangayId], references: [id])
  transactions      transaction[]
}

model barangays {
  id                    Int        @id @default(autoincrement())
  barangay_name         String
  barangay_delivery_fee Float
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  customer              customer[]
}

model settings {
  admin_id            Int      @id
  delivery_fee        Float
  contact_number      String
  email_address       String
  address             String
  extra_details       String?
  updatedAt           DateTime @updatedAt
  defaultPassForStaff String   @default("Default123")
  store_name          String   @default("Sample")
  admin               admin    @relation(fields: [admin_id], references: [id])
}

model product_price_history {
  id         Int      @id @default(autoincrement())
  product_id Int
  price      Float
  createdAt  DateTime @default(now())
  product    products @relation(fields: [product_id], references: [id])

  orders orders[]
}

enum admin_type {
  SUPER_ADMIN
  BRANCH
}

enum product_status {
  AVAILABLE
  NOT_AVAILABLE
}

enum customer_status {
  REGISTERED
  BLOCKED
}

enum transaction_type {
  DINE_IN
  PICK_UP
  DELIVERY
}

enum transaction_status {
  PENDING
  ONGOING
  DONE
  CANCELLED
  DELIVERED
}
